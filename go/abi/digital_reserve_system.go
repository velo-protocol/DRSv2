// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vabi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DigitalReserveSystemABI is the input ABI used to generate the binding from.
const DigitalReserveSystemABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heartAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presentAmount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCreditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peggedCurrency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"peggedValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"heart\",\"outputs\":[{\"internalType\":\"contractIHeart\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peggedCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"peggedValue\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"netCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"mintFromCollateralAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"mintFromStableCreditAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCreditAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"collateralHealthCheck\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// DigitalReserveSystemBin is the compiled bytecode used for deploying new contracts.
var DigitalReserveSystemBin = "0x608060405234801561001057600080fd5b506040516152e03803806152e08339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b031990921691909117905561527b806100656000396000f3fe608060405260043610620000865760003560e01c8063cbbaa9a01162000055578063cbbaa9a014620002c9578063f15821f714620003eb578063f58d1c941462000466578063ff4b2032146200049a5762000086565b806324b76fd5146200008b57806341212e9e146200012857806348268143146200019c57806399bbfd72146200024e575b600080fd5b3480156200009857600080fd5b506200011460048036036040811015620000b157600080fd5b81359190810190604081016020820135600160201b811115620000d357600080fd5b820183602082011115620000e657600080fd5b803590602001918460018302840111600160201b831117156200010857600080fd5b509092509050620005a5565b604080519115158252519081900360200190f35b62000114600480360360208110156200014057600080fd5b810190602081018135600160201b8111156200015b57600080fd5b8201836020820111156200016e57600080fd5b803590602001918460018302840111600160201b831117156200019057600080fd5b5090925090506200089b565b348015620001a957600080fd5b506200021e60048036036020811015620001c257600080fd5b810190602081018135600160201b811115620001dd57600080fd5b820183602082011115620001f057600080fd5b803590602001918460018302840111600160201b831117156200021257600080fd5b509092509050620008e7565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b62000114600480360360408110156200026657600080fd5b81359190810190604081016020820135600160201b8111156200028857600080fd5b8201836020820111156200029b57600080fd5b803590602001918460018302840111600160201b83111715620002bd57600080fd5b50909250905062000b42565b348015620002d657600080fd5b506200035760048036036080811015620002ef57600080fd5b813591602081013591810190606081016040820135600160201b8111156200031657600080fd5b8201836020820111156200032957600080fd5b803590602001918460018302840111600160201b831117156200034b57600080fd5b9193509150356200100c565b6040518080602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019080838360005b83811015620003ae57818101518382015260200162000394565b50505050905090810190601f168015620003dc5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b62000114600480360360408110156200040357600080fd5b81359190810190604081016020820135600160201b8111156200042557600080fd5b8201836020820111156200043857600080fd5b803590602001918460018302840111600160201b831117156200045a57600080fd5b50909250905062001689565b3480156200047357600080fd5b506200047e62001b53565b604080516001600160a01b039092168252519081900360200190f35b348015620004a757600080fd5b506200051c60048036036020811015620004c057600080fd5b810190602081018135600160201b811115620004db57600080fd5b820183602082011115620004ee57600080fd5b803590602001918460018302840111600160201b831117156200051057600080fd5b50909250905062001b62565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015620005675781810151838201526020016200054d565b50505050905090810190601f168015620005955780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000808411620005e75760405162461bcd60e51b8152600401808060200182810382526041815260200180620051456041913960600191505060405180910390fd5b8115801590620005f85750600c8211155b620006355760405162461bcd60e51b815260040180806020018281038252603581526020018062004e846035913960400191505060405180910390fd5b6000806000806200067c87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c6292505050565b929650909450925090506001600160a01b038316620006cd5760405162461bcd60e51b815260040180806020018281038252603f81526020018062004f10603f913960400191505060405180910390fd5b6200070e87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620021f492505050565b5060006200071d858362002724565b9050600062000748629896806200073b8c8563ffffffff6200299316565b9063ffffffff620029f116565b60408051632b83cccd60e01b8152336004820152602481018d90526044810183905290519192506001600160a01b03881691632b83cccd9160648082019260009290919082900301818387803b158015620007a257600080fd5b505af1158015620007b7573d6000803e3d6000fd5b50505050856001600160a01b0316632664ecf96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620007f757600080fd5b505af11580156200080c573d6000803e3d6000fd5b5050505083856001600160a01b03167fa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e8b8b8e8660405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019998505050505050505050565b6000620008de83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620021f492505050565b90505b92915050565b60008080808415801590620008fd5750600c8511155b6200093a5760405162461bcd60e51b815260040180806020018281038252604481526020018062004e406044913960600191505060405180910390fd5b600080600080620009818a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c6292505050565b929650909450925090506001600160a01b038316620009d25760405162461bcd60e51b815260040180806020018281038252604e815260200180620051ba604e913960600191505060405180910390fd5b600062000a488583876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1457600080fd5b505afa15801562000a29573d6000803e3d6000fd5b505050506040513d602081101562000a4057600080fd5b505162002a35565b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a8657600080fd5b505afa15801562000a9b573d6000803e3d6000fd5b505050506040513d602081101562000ab257600080fd5b5051604080516370a0823160e01b81526001600160a01b038981166004830152915191909216916370a08231916024808301926020929190829003018186803b15801562000aff57600080fd5b505afa15801562000b14573d6000803e3d6000fd5b505050506040513d602081101562000b2b57600080fd5b5051949c939b509099509297509095505050505050565b60008054604080516311270edd60e21b815233600482015290516001600160a01b039092169163449c3b7491602480820192602092909190829003018186803b15801562000b8f57600080fd5b505afa15801562000ba4573d6000803e3d6000fd5b505050506040513d602081101562000bbb57600080fd5b505162000bfa5760405162461bcd60e51b815260040180806020018281038252604981526020018062004fe76049913960600191505060405180910390fd5b60008060008062000c4187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c6292505050565b9350935093509350836001600160a01b03166320dc407a6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c8357600080fd5b505afa15801562000c98573d6000803e3d6000fd5b505050506040513d602081101562000caf57600080fd5b50516001600160a01b0316331462000cf95760405162461bcd60e51b8152600401808060200182810382526059815260200180620050a36059913960600191505060405180910390fd5b60008060008062000f608c6000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b15801562000d5257600080fd5b505afa15801562000d67573d6000803e3d6000fd5b505050506040513d602081101562000d7e57600080fd5b5051604080516389dbe24b60e01b8152600481018a905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b15801562000dca57600080fd5b505afa15801562000ddf573d6000803e3d6000fd5b505050506040513d602081101562000df657600080fd5b50516000546040805163016b3a1160e01b815290516001600160a01b039092169163016b3a1191600480820192602092909190829003018186803b15801562000e3e57600080fd5b505afa15801562000e53573d6000803e3d6000fd5b505050506040513d602081101562000e6a57600080fd5b5051600054604080516307dbcf5960e11b8152600481018d905290516001600160a01b0390921691630fb79eb291602480820192602092909190829003018186803b15801562000eb957600080fd5b505afa15801562000ece573d6000803e3d6000fd5b505050506040513d602081101562000ee557600080fd5b505160408051633cf252a960e01b815290516001600160a01b038f1691633cf252a9916004808301926020929190829003018186803b15801562000f2857600080fd5b505afa15801562000f3d573d6000803e3d6000fd5b505050506040513d602081101562000f5457600080fd5b50516298968062002ba7565b935093509350935062000f7887898e84878762002c75565b5060008c905086896001600160a01b03167fddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc8e8e858a60405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019c9b505050505050505050505050565b60008054604080516311270edd60e21b81523360048201529051606093926001600160a01b03169163449c3b74916024808301926020929190829003018186803b1580156200105a57600080fd5b505afa1580156200106f573d6000803e3d6000fd5b505050506040513d60208110156200108657600080fd5b5051620010c55760405162461bcd60e51b815260040180806020018281038252604981526020018062004fe76049913960600191505060405180910390fd5b8315801590620010d65750600c8411155b620011135760405162461bcd60e51b8152600401808060200182810382526034815260200180620051866034913960400191505060405180910390fd5b60405163c2bebec760e01b81526020600482019081526024820186905260009173__Hasher________________________________9163c2bebec791899189918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b1580156200119257600080fd5b505af4158015620011a7573d6000803e3d6000fd5b505050506040513d6020811015620011be57600080fd5b505160008054604080516378f23b5360e11b815260048101859052905193945091926001600160a01b039091169163f1e476a6916024808301926020929190829003018186803b1580156200121257600080fd5b505afa15801562001227573d6000803e3d6000fd5b505050506040513d60208110156200123e57600080fd5b505190506001600160a01b038116156200128a5760405162461bcd60e51b815260040180806020018281038252603b81526020018062005030603b913960400191505060405180910390fd5b600080546040805163d476f04b60e01b8152600481018d905290516001600160a01b039092169163d476f04b91602480820192602092909190829003018186803b158015620012d857600080fd5b505afa158015620012ed573d6000803e3d6000fd5b505050506040513d60208110156200130457600080fd5b505190506001600160a01b0381166200134f5760405162461bcd60e51b815260040180806020018281038252603e81526020018062004f88603e913960400191505060405180910390fd5b600073__Hasher________________________________63b42998008c8c6040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015620013a957600080fd5b505af4158015620013be573d6000803e3d6000fd5b505050506040513d6020811015620013d557600080fd5b50516000546040805163c084770d60e01b81526004810184905290519293506001600160a01b039091169163c084770d91602480820192602092909190829003018186803b1580156200142757600080fd5b505afa1580156200143c573d6000803e3d6000fd5b505050506040513d60208110156200145357600080fd5b5051620014925760405162461bcd60e51b815260040180806020018281038252605481526020018062004d746054913960600191505060405180910390fd5b60008a338d858d8d8d6000809054906101000a90046001600160a01b0316604051620014be906200337b565b8881526001600160a01b03808916602083015260408201889052868116606083015260a08201849052821660c082015260e06080820181815290820185905261010082018686808284376000838201819052604051601f909201601f19169093018190039c509a509098505050505050505050f08015801562001545573d6000803e3d6000fd5b506000805460408051635d99b3a560e11b81526001600160a01b038086166004830152915194955091169263bb33674a9260248084019391929182900301818387803b1580156200159557600080fd5b505af1158015620015aa573d6000803e3d6000fd5b505050508b7fcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df8b8b8e8c866040518080602001858152602001848152602001836001600160a01b03166001600160a01b031681526020018281038252878782818152602001925080828437600083820152604051601f909101601f19169092018290039850909650505050505050a289898282828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929c50929a50505050505050505050509550959350505050565b60008054604080516311270edd60e21b815233600482015290516001600160a01b039092169163449c3b7491602480820192602092909190829003018186803b158015620016d657600080fd5b505afa158015620016eb573d6000803e3d6000fd5b505050506040513d60208110156200170257600080fd5b5051620017415760405162461bcd60e51b815260040180806020018281038252604981526020018062004fe76049913960600191505060405180910390fd5b6000806000806200178887878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c6292505050565b9350935093509350836001600160a01b03166320dc407a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017ca57600080fd5b505afa158015620017df573d6000803e3d6000fd5b505050506040513d6020811015620017f657600080fd5b50516001600160a01b03163314620018405760405162461bcd60e51b815260040180806020018281038252605781526020018062004eb96057913960600191505060405180910390fd5b60008060008062001aa78c6000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200189957600080fd5b505afa158015620018ae573d6000803e3d6000fd5b505050506040513d6020811015620018c557600080fd5b5051604080516389dbe24b60e01b8152600481018a905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b1580156200191157600080fd5b505afa15801562001926573d6000803e3d6000fd5b505050506040513d60208110156200193d57600080fd5b50516000546040805163016b3a1160e01b815290516001600160a01b039092169163016b3a1191600480820192602092909190829003018186803b1580156200198557600080fd5b505afa1580156200199a573d6000803e3d6000fd5b505050506040513d6020811015620019b157600080fd5b5051600054604080516307dbcf5960e11b8152600481018d905290516001600160a01b0390921691630fb79eb291602480820192602092909190829003018186803b15801562001a0057600080fd5b505afa15801562001a15573d6000803e3d6000fd5b505050506040513d602081101562001a2c57600080fd5b505160408051633cf252a960e01b815290516001600160a01b038f1691633cf252a9916004808301926020929190829003018186803b15801562001a6f57600080fd5b505afa15801562001a84573d6000803e3d6000fd5b505050506040513d602081101562001a9b57600080fd5b5051629896806200311b565b935093509350935062001abf87898684878762002c75565b5060008c905086896001600160a01b03167fddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc8e8e898660405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019c9b505050505050505050505050565b6000546001600160a01b031681565b6060600080831580159062001b785750600c8411155b62001bb55760405162461bcd60e51b815260040180806020018281038252603a81526020018062004e06603a913960400191505060405180910390fd5b600080600062001bfb88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c6292505050565b93509350509250600062001c10848362002724565b90508888848383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929d50939b509199505050505050505050509250925092565b6000805460405163c2bebec760e01b815260206004820181815285516024840152855185948594859485946001600160a01b039093169363f1e476a69373__Hasher________________________________9363c2bebec7938d938392604401918501908083838d5b8381101562001ce557818101518382015260200162001ccb565b50505050905090810190601f16801562001d135780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801562001d3157600080fd5b505af415801562001d46573d6000803e3d6000fd5b505050506040513d602081101562001d5d57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b15801562001d9d57600080fd5b505afa15801562001db2573d6000803e3d6000fd5b505050506040513d602081101562001dc957600080fd5b505190506001600160a01b03811662001e145760405162461bcd60e51b815260040180806020018281038252603f81526020018062005208603f913960400191505060405180910390fd5b6000816001600160a01b0316635312424c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e5057600080fd5b505afa15801562001e65573d6000803e3d6000fd5b505050506040513d602081101562001e7c57600080fd5b5051600080546040805163d476f04b60e01b815260048101859052905193945091926001600160a01b039091169163d476f04b916024808301926020929190829003018186803b15801562001ed057600080fd5b505afa15801562001ee5573d6000803e3d6000fd5b505050506040513d602081101562001efc57600080fd5b50516040805163d8dfeb4560e01b815290519192506001600160a01b0385169163d8dfeb4591600480820192602092909190829003018186803b15801562001f4357600080fd5b505afa15801562001f58573d6000803e3d6000fd5b505050506040513d602081101562001f6f57600080fd5b50516001600160a01b0382811691161462001fbc5760405162461bcd60e51b8152600401808060200182810382526049815260200180620050fc6049913960600191505060405180910390fd5b600073__Hasher________________________________63b429980084866001600160a01b031663aefee60e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200201357600080fd5b505afa15801562002028573d6000803e3d6000fd5b505050506040513d60208110156200203f57600080fd5b5051604080516001600160e01b031960e086901b16815260048101939093526024830191909152516044808301926020929190829003018186803b1580156200208757600080fd5b505af41580156200209c573d6000803e3d6000fd5b505050506040513d6020811015620020b357600080fd5b50516000805460408051630794e3db60e41b8152905193945091926001600160a01b039091169163794e3db0916004808301926020929190829003018186803b1580156200210057600080fd5b505afa15801562002115573d6000803e3d6000fd5b505050506040513d60208110156200212c57600080fd5b5051604080516389dbe24b60e01b81526004810185905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b1580156200217857600080fd5b505afa1580156200218d573d6000803e3d6000fd5b505050506040513d6020811015620021a457600080fd5b505111620021e45760405162461bcd60e51b815260040180806020018281038252603e81526020018062004dc8603e913960400191505060405180910390fd5b9296509450925090509193509193565b6000808251118015620022095750600c825111155b620022465760405162461bcd60e51b81526004018080602001828103825260388152602001806200506b6038913960400191505060405180910390fd5b600080600080620022578662001c62565b929650909450925090506001600160a01b038316620022a85760405162461bcd60e51b815260040180806020018281038252604281526020018062004d326042913960600191505060405180910390fd5b6000620022ea8583876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a1457600080fd5b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156200232857600080fd5b505afa1580156200233d573d6000803e3d6000fd5b505050506040513d60208110156200235457600080fd5b5051604080516370a0823160e01b81526001600160a01b038981166004830152915191909216916370a08231916024808301926020929190829003018186803b158015620023a157600080fd5b505afa158015620023b6573d6000803e3d6000fd5b505050506040513d6020811015620023cd57600080fd5b5051905081811415620024125760405162461bcd60e51b815260040180806020018281038252603981526020018062004f4f6039913960400191505060405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166381c210f86040518163ffffffff1660e01b815260040160206040518083038186803b1580156200246257600080fd5b505afa15801562002477573d6000803e3d6000fd5b505050506040513d60208110156200248e57600080fd5b505190508183111562002534576001600160a01b0381166348fafdf68689620024be878763ffffffff620031d816565b6040518463ffffffff1660e01b815260040180848152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156200251557600080fd5b505af11580156200252a573d6000803e3d6000fd5b5050505062002669565b6000546040805163d476f04b60e01b81526004810188905290516001600160a01b039092169163d476f04b91602480820192602092909190829003018186803b1580156200258157600080fd5b505afa15801562002596573d6000803e3d6000fd5b505050506040513d6020811015620025ad57600080fd5b50516001600160a01b03166323b872dd8883620025d1868863ffffffff620031d816565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156200263a57600080fd5b505af11580156200264f573d6000803e3d6000fd5b505050506040513d60208110156200266657600080fd5b50505b847e8e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded3125718a85856040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015620026d8578181015183820152602001620026be565b50505050905090810190601f168015620027065780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250600198975050505050505050565b6000806200298b6000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200277957600080fd5b505afa1580156200278e573d6000803e3d6000fd5b505050506040513d6020811015620027a557600080fd5b5051604080516389dbe24b60e01b81526004810187905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b158015620027f157600080fd5b505afa15801562002806573d6000803e3d6000fd5b505050506040513d60208110156200281d57600080fd5b505160408051633cf252a960e01b815290516200073b916001600160a01b03891691633cf252a991600480820192602092909190829003018186803b1580156200286657600080fd5b505afa1580156200287b573d6000803e3d6000fd5b505050506040513d60208110156200289257600080fd5b5051600054604080516314c4909360e21b815290516001600160a01b0392831692630fb79eb292908c1691635312424c91600480820192602092909190829003018186803b158015620028e457600080fd5b505afa158015620028f9573d6000803e3d6000fd5b505050506040513d60208110156200291057600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b1580156200295057600080fd5b505afa15801562002965573d6000803e3d6000fd5b505050506040513d60208110156200297c57600080fd5b50519063ffffffff6200299316565b949350505050565b600082620029a457506000620008e1565b82820282848281620029b257fe5b0414620008de5760405162461bcd60e51b815260040180806020018281038252602181526020018062004fc66021913960400191505060405180910390fd5b6000620008de83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200321c565b6000805460408051630794e3db60e41b815290516200298b926001600160a01b03169163794e3db0916004808301926020929190829003018186803b15801562002a7e57600080fd5b505afa15801562002a93573d6000803e3d6000fd5b505050506040513d602081101562002aaa57600080fd5b5051604080516389dbe24b60e01b81526004810187905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b15801562002af657600080fd5b505afa15801562002b0b573d6000803e3d6000fd5b505050506040513d602081101562002b2257600080fd5b505160408051633cf252a960e01b815290516200073b916001600160a01b03891691633cf252a991600480820192602092909190829003018186803b15801562002b6b57600080fd5b505afa15801562002b80573d6000803e3d6000fd5b505050506040513d602081101562002b9757600080fd5b5051859063ffffffff6200299316565b60008080808062002bd18762002bc48d8b63ffffffff6200299316565b9063ffffffff6200299316565b905062002bea866200073b838d63ffffffff620029f116565b9050600062002c1662002c04888c63ffffffff620031d816565b6200073b848d63ffffffff6200299316565b9050600062002c2c838363ffffffff620032c316565b9050600062002c478b6200073b868c63ffffffff6200299316565b9050600062002c5d858363ffffffff620031d816565b929f919e50919c50919a509098505050505050505050565b600080866001600160a01b0316635312424c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002cb257600080fd5b505afa15801562002cc7573d6000803e3d6000fd5b505050506040513d602081101562002cde57600080fd5b505160008054604080516323b872dd60e01b81523360048201526001600160a01b039283166024820152604481018a90529051939450908b16926323b872dd92606480840193602093929083900390910190829087803b15801562002d4257600080fd5b505af115801562002d57573d6000803e3d6000fd5b505050506040513d602081101562002d6e57600080fd5b5050604080516323b872dd60e01b81523360048201526001600160a01b038981166024830152604482018790529151918a16916323b872dd916064808201926020929091908290030181600087803b15801562002dca57600080fd5b505af115801562002ddf573d6000803e3d6000fd5b505050506040513d602081101562002df657600080fd5b5050604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b15801562002e4e57600080fd5b505af115801562002e63573d6000803e3d6000fd5b505050506040513d602081101562002e7a57600080fd5b50506000805460408051631038421f60e31b815290516001600160a01b03909216916381c210f891600480820192602092909190829003018186803b15801562002ec357600080fd5b505afa15801562002ed8573d6000803e3d6000fd5b505050506040513d602081101562002eef57600080fd5b50516040805163095ea7b360e01b81526001600160a01b038084166004830152602482018890529151929350908b169163095ea7b3916044808201926020929091908290030181600087803b15801562002f4857600080fd5b505af115801562002f5d573d6000803e3d6000fd5b505050506040513d602081101562002f7457600080fd5b505060408051637f5f93db60e11b8152600481018490523060248201526044810186905290516001600160a01b0383169163febf27b691606480830192600092919082900301818387803b15801562002fcc57600080fd5b505af115801562002fe1573d6000803e3d6000fd5b5050604080516340c10f1960e01b8152336004820152602481018b905290516001600160a01b038c1693506340c10f199250604480830192600092919082900301818387803b1580156200303457600080fd5b505af115801562003049573d6000803e3d6000fd5b50505050876001600160a01b0316632664ecf96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200308957600080fd5b505af11580156200309e573d6000803e3d6000fd5b5050600080546040805162b8d7ab60e11b8152600481018c90526024810188905290516001600160a01b039092169450630171af569350604480820193929182900301818387803b158015620030f357600080fd5b505af115801562003108573d6000803e3d6000fd5b5060019c9b505050505050505050505050565b60008080808062003138866200073b8d8c63ffffffff6200299316565b905060006200314e8c8363ffffffff620031d816565b90506000620031698862002bc4848f63ffffffff6200299316565b90506200318f620031818b8b63ffffffff6200299316565b829063ffffffff620029f116565b90506000620031aa8b6200073b858c63ffffffff6200299316565b90506000620031c0848363ffffffff620031d816565b929f919e50919c50929a509198505050505050505050565b6000620008de83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506200331e565b60008183620032ac5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200327057818101518382015260200162003256565b50505050905090810190601f1680156200329e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581620032b957fe5b0495945050505050565b600082820183811015620008de576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115620033735760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156200327057818101518382015260200162003256565b505050900390565b6119a8806200338a8339019056fe60806040523480156200001157600080fd5b50604051620019a8380380620019a8833981810160405260e08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251640100000000811182820188101715620000a457600080fd5b82525081516020918201929091019080838360005b83811015620000d3578181015183820152602001620000b9565b50505050905090810190601f168015620001015780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518551929450925084918291600791620001329160039190850190620001c3565b50815162000148906004906020850190620001c3565b5060058054600a80546001600160a01b03199081166001600160a01b039d8e161790915560089790975560099b909b5560068054909616978a1697909717909455505060079490945560ff1990951660ff90951694909417610100600160a81b03191661010092909316919091029190911790555062000268565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020657805160ff191683800117855562000236565b8280016001018555821562000236579182015b828111156200023657825182559160200191906001019062000219565b506200024492915062000248565b5090565b6200026591905b808211156200024457600081556001016200024f565b90565b61173080620002786000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806349bf0f2d116100de5780639dc29fac11610097578063aefee60e11610071578063aefee60e1461045e578063d8dfeb4514610466578063dd62ed3e1461046e578063f58d1c941461049c57610173565b80639dc29fac146103da578063a457c2d714610406578063a9059cbb1461043257610173565b806349bf0f2d1461036b5780634e841e3e146103945780635312424c1461039c5780635d1ca631146103a457806370a08231146103ac57806395d89b41146103d257610173565b80632664ecf9116101305780632664ecf9146102b15780632b83cccd146102bb578063313ce567146102ed578063395093511461030b5780633cf252a91461033757806340c10f191461033f57610173565b806306fdde0314610178578063095ea7b3146101f557806318160ddd146102355780631e2650de1461024f57806320dc407a1461027357806323b872dd1461027b575b600080fd5b6101806104a4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102216004803603604081101561020b57600080fd5b506001600160a01b03813516906020013561053a565b604080519115158252519081900360200190f35b61023d610557565b60408051918252519081900360200190f35b61025761055d565b604080516001600160a01b039092168252519081900360200190f35b61025761056c565b6102216004803603606081101561029157600080fd5b506001600160a01b0381358116916020810135909116906040013561057b565b6102b9610608565b005b6102b9600480360360608110156102d157600080fd5b506001600160a01b0381351690602081013590604001356107cb565b6102f5610923565b6040805160ff9092168252519081900360200190f35b6102216004803603604081101561032157600080fd5b506001600160a01b03813516906020013561092c565b61023d610980565b6102b96004803603604081101561035557600080fd5b506001600160a01b038135169060200135610986565b610373610a56565b604080519283526001600160a01b0390911660208301528051918290030190f35b610180610ae7565b61023d610c14565b61023d610c1a565b61023d600480360360208110156103c257600080fd5b50356001600160a01b0316610e23565b610180610e3e565b6102b9600480360360408110156103f057600080fd5b506001600160a01b038135169060200135610e9f565b6102216004803603604081101561041c57600080fd5b506001600160a01b038135169060200135610f6f565b6102216004803603604081101561044857600080fd5b506001600160a01b038135169060200135610fdd565b61023d610ff1565b610257610ff7565b61023d6004803603604081101561048457600080fd5b506001600160a01b0381358116916020013516611006565b610257611031565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b5050505050905090565b600061054e610547611045565b8484611049565b50600192915050565b60025490565b600b546001600160a01b031681565b600a546001600160a01b031681565b6000610588848484611135565b6105fe84610594611045565b6105f985604051806060016040528060288152602001611645602891396001600160a01b038a166000908152600160205260408120906105d2611045565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61129116565b611049565b5060019392505050565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d602081101561067b57600080fd5b50516001600160a01b0316146106ce576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b600654604080516370a0823160e01b815230600482015290516001600160a01b039092169163095ea7b391339184916370a08231916024808301926020929190829003018186803b15801561072257600080fd5b505afa158015610736573d6000803e3d6000fd5b505050506040513d602081101561074c57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d60208110156107c757600080fd5b5050565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d602081101561083e57600080fd5b50516001600160a01b031614610891576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6006546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156108e757600080fd5b505af11580156108fb573d6000803e3d6000fd5b505050506040513d602081101561091157600080fd5b5061091e90508383611328565b505050565b60055460ff1690565b600061054e610939611045565b846105f9856001600061094a611045565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61142416565b60085481565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d60208110156109f957600080fd5b50516001600160a01b031614610a4c576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6107c78282611485565b600654604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610aa657600080fd5b505afa158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b50516006549092506001600160a01b031690509091565b6060306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610b2257600080fd5b505afa158015610b36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b5f57600080fd5b8101908080516040519392919084640100000000821115610b7f57600080fd5b908301906020820185811115610b9457600080fd5b8251640100000000811182820188101715610bae57600080fd5b82525081516020918201929091019080838360005b83811015610bdb578181015183820152602001610bc3565b50505050905090810190601f168015610c085780820380516001836020036101000a031916815260200191505b50604052505050905090565b60075481565b600073__Hasher________________________________63c2bebec7306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cac57600080fd5b8101908080516040519392919084640100000000821115610ccc57600080fd5b908301906020820185811115610ce157600080fd5b8251640100000000811182820188101715610cfb57600080fd5b82525081516020918201929091019080838360005b83811015610d28578181015183820152602001610d10565b50505050905090810190601f168015610d555780820380516001836020036101000a031916815260200191505b506040525050506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610da8578181015183820152602001610d90565b50505050905090810190601f168015610dd55780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610df257600080fd5b505af4158015610e06573d6000803e3d6000fd5b505050506040513d6020811015610e1c57600080fd5b5051905090565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105305780601f1061050557610100808354040283529160200191610530565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d6020811015610f1257600080fd5b50516001600160a01b031614610f65576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6107c78282611328565b600061054e610f7c611045565b846105f9856040518060600160405280602581526020016116d76025913960016000610fa6611045565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61129116565b600061054e610fea611045565b8484611135565b60095481565b6006546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055461010090046001600160a01b031681565b3390565b6001600160a01b03831661108e5760405162461bcd60e51b81526004018080602001828103825260248152602001806116b36024913960400191505060405180910390fd5b6001600160a01b0382166110d35760405162461bcd60e51b81526004018080602001828103825260228152602001806115fd6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661117a5760405162461bcd60e51b815260040180806020018281038252602581526020018061168e6025913960400191505060405180910390fd5b6001600160a01b0382166111bf5760405162461bcd60e51b81526004018080602001828103825260238152602001806115b86023913960400191505060405180910390fd5b6112028160405180606001604052806026815260200161161f602691396001600160a01b038616600090815260208190526040902054919063ffffffff61129116565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611237908263ffffffff61142416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156113205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112e55781810151838201526020016112cd565b50505050905090810190601f1680156113125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821661136d5760405162461bcd60e51b815260040180806020018281038252602181526020018061166d6021913960400191505060405180910390fd5b6113b0816040518060600160405280602281526020016115db602291396001600160a01b038516600090815260208190526040902054919063ffffffff61129116565b6001600160a01b0383166000908152602081905260409020556002546113dc908263ffffffff61157516565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008282018381101561147e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166114e0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6002546114f3908263ffffffff61142416565b6002556001600160a01b03821660009081526020819052604090205461151f908263ffffffff61142416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600061147e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061129156fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a7231582072975d3df9d7cf642bf89e24d197ccab46ccd82dbcf3cfbbc1a9ab0ca5563d2764736f6c634300051000324469676974616c5265736572766553797374656d2e726562616c616e63653a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e73657475703a20636f6c6c61746572616c4173736574436f6465202d2070656767656443757272656e6379207061697220646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a2076616c6964207072696365206e6f7420666f756e644469676974616c5265736572766553797374656d2e67657445786368616e67653a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e636f6c6c61746572616c4865616c7468436865636b3a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e72656465656d3a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e6d696e7446726f6d436f6c6c61746572616c416d6f756e743a2074686520737461626c652063726564697420646f6573206e6f742062656c6f6e6720746f20796f754469676974616c5265736572766553797374656d2e72656465656d3a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e726562616c616e63653a20726562616c616e6365206973206e6f742072657175697265644469676974616c5265736572766553797374656d2e73657475703a20636f6c6c61746572616c4173736574436f646520646f6573206e6f74206578697374536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774469676974616c5265736572766553797374656d2e6f6e6c7954727573746564506172746e65723a2063616c6c6572206d7573742062652061207472757374656420706172746e65724469676974616c5265736572766553797374656d2e73657475703a206173736574436f64652068617320616c7265616479206265656e20757365644469676974616c5265736572766553797374656d2e726562616c616e63653a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e6d696e7446726f6d537461626c65437265646974416d6f756e743a2074686520737461626c652063726564697420646f6573206e6f742062656c6f6e6720746f20796f754469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a20636f6c6c61746572616c4173736574206d757374206265207468652073616d654469676974616c5265736572766553797374656d2e72656465656d3a2072656465656d20616d6f756e74206d7573742062652067726561746572207468616e20304469676974616c5265736572766553797374656d2e73657475703a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e636f6c6c61746572616c4865616c7468436865636b3a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a20737461626c65437265646974206e6f74206578697374a265627a7a72315820f2bc03edb507a8a7c1b1b6d2fe7518b5c36a4f550a8b91edfd327c2a2a9c926e64736f6c63430005100032"

// DeployDigitalReserveSystem deploys a new Ethereum contract, binding an instance of DigitalReserveSystem to it.
func DeployDigitalReserveSystem(auth *bind.TransactOpts, backend bind.ContractBackend, heartAddr common.Address) (common.Address, *types.Transaction, *DigitalReserveSystem, error) {
	parsed, err := abi.JSON(strings.NewReader(DigitalReserveSystemABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DigitalReserveSystemBin), backend, heartAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DigitalReserveSystem{DigitalReserveSystemCaller: DigitalReserveSystemCaller{contract: contract}, DigitalReserveSystemTransactor: DigitalReserveSystemTransactor{contract: contract}, DigitalReserveSystemFilterer: DigitalReserveSystemFilterer{contract: contract}}, nil
}

// DigitalReserveSystem is an auto generated Go binding around an Ethereum contract.
type DigitalReserveSystem struct {
	DigitalReserveSystemCaller     // Read-only binding to the contract
	DigitalReserveSystemTransactor // Write-only binding to the contract
	DigitalReserveSystemFilterer   // Log filterer for contract events
}

// DigitalReserveSystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type DigitalReserveSystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DigitalReserveSystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DigitalReserveSystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DigitalReserveSystemSession struct {
	Contract     *DigitalReserveSystem // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DigitalReserveSystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DigitalReserveSystemCallerSession struct {
	Contract *DigitalReserveSystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// DigitalReserveSystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DigitalReserveSystemTransactorSession struct {
	Contract     *DigitalReserveSystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// DigitalReserveSystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type DigitalReserveSystemRaw struct {
	Contract *DigitalReserveSystem // Generic contract binding to access the raw methods on
}

// DigitalReserveSystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DigitalReserveSystemCallerRaw struct {
	Contract *DigitalReserveSystemCaller // Generic read-only contract binding to access the raw methods on
}

// DigitalReserveSystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DigitalReserveSystemTransactorRaw struct {
	Contract *DigitalReserveSystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDigitalReserveSystem creates a new instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystem(address common.Address, backend bind.ContractBackend) (*DigitalReserveSystem, error) {
	contract, err := bindDigitalReserveSystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystem{DigitalReserveSystemCaller: DigitalReserveSystemCaller{contract: contract}, DigitalReserveSystemTransactor: DigitalReserveSystemTransactor{contract: contract}, DigitalReserveSystemFilterer: DigitalReserveSystemFilterer{contract: contract}}, nil
}

// NewDigitalReserveSystemCaller creates a new read-only instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemCaller(address common.Address, caller bind.ContractCaller) (*DigitalReserveSystemCaller, error) {
	contract, err := bindDigitalReserveSystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemCaller{contract: contract}, nil
}

// NewDigitalReserveSystemTransactor creates a new write-only instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemTransactor(address common.Address, transactor bind.ContractTransactor) (*DigitalReserveSystemTransactor, error) {
	contract, err := bindDigitalReserveSystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemTransactor{contract: contract}, nil
}

// NewDigitalReserveSystemFilterer creates a new log filterer instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemFilterer(address common.Address, filterer bind.ContractFilterer) (*DigitalReserveSystemFilterer, error) {
	contract, err := bindDigitalReserveSystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemFilterer{contract: contract}, nil
}

// bindDigitalReserveSystem binds a generic wrapper to an already deployed contract.
func bindDigitalReserveSystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DigitalReserveSystemABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DigitalReserveSystem *DigitalReserveSystemCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DigitalReserveSystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DigitalReserveSystem *DigitalReserveSystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DigitalReserveSystem *DigitalReserveSystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.contract.Transact(opts, method, params...)
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(address, bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) CollateralHealthCheck(opts *bind.CallOpts, assetCode string) (common.Address, [32]byte, *big.Int, *big.Int, error) {
	var (
		ret0 = new(common.Address)
		ret1 = new([32]byte)
		ret2 = new(*big.Int)
		ret3 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
	}
	err := _DigitalReserveSystem.contract.Call(opts, out, "collateralHealthCheck", assetCode)
	return *ret0, *ret1, *ret2, *ret3, err
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(address, bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemSession) CollateralHealthCheck(assetCode string) (common.Address, [32]byte, *big.Int, *big.Int, error) {
	return _DigitalReserveSystem.Contract.CollateralHealthCheck(&_DigitalReserveSystem.CallOpts, assetCode)
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(address, bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) CollateralHealthCheck(assetCode string) (common.Address, [32]byte, *big.Int, *big.Int, error) {
	return _DigitalReserveSystem.Contract.CollateralHealthCheck(&_DigitalReserveSystem.CallOpts, assetCode)
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) GetExchange(opts *bind.CallOpts, assetCode string) (string, [32]byte, *big.Int, error) {
	var (
		ret0 = new(string)
		ret1 = new([32]byte)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _DigitalReserveSystem.contract.Call(opts, out, "getExchange", assetCode)
	return *ret0, *ret1, *ret2, err
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemSession) GetExchange(assetCode string) (string, [32]byte, *big.Int, error) {
	return _DigitalReserveSystem.Contract.GetExchange(&_DigitalReserveSystem.CallOpts, assetCode)
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) GetExchange(assetCode string) (string, [32]byte, *big.Int, error) {
	return _DigitalReserveSystem.Contract.GetExchange(&_DigitalReserveSystem.CallOpts, assetCode)
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) Heart(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DigitalReserveSystem.contract.Call(opts, out, "heart")
	return *ret0, err
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Heart() (common.Address, error) {
	return _DigitalReserveSystem.Contract.Heart(&_DigitalReserveSystem.CallOpts)
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) Heart() (common.Address, error) {
	return _DigitalReserveSystem.Contract.Heart(&_DigitalReserveSystem.CallOpts)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) MintFromCollateralAmount(opts *bind.TransactOpts, netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "mintFromCollateralAmount", netCollateralAmount, assetCode)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) MintFromCollateralAmount(netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromCollateralAmount(&_DigitalReserveSystem.TransactOpts, netCollateralAmount, assetCode)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) MintFromCollateralAmount(netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromCollateralAmount(&_DigitalReserveSystem.TransactOpts, netCollateralAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) MintFromStableCreditAmount(opts *bind.TransactOpts, mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "mintFromStableCreditAmount", mintAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) MintFromStableCreditAmount(mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromStableCreditAmount(&_DigitalReserveSystem.TransactOpts, mintAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) MintFromStableCreditAmount(mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromStableCreditAmount(&_DigitalReserveSystem.TransactOpts, mintAmount, assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Rebalance(opts *bind.TransactOpts, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "rebalance", assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Rebalance(assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Rebalance(&_DigitalReserveSystem.TransactOpts, assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Rebalance(assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Rebalance(&_DigitalReserveSystem.TransactOpts, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Redeem(opts *bind.TransactOpts, stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "redeem", stableCreditAmount, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Redeem(stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Redeem(&_DigitalReserveSystem.TransactOpts, stableCreditAmount, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Redeem(stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Redeem(&_DigitalReserveSystem.TransactOpts, stableCreditAmount, assetCode)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Setup(opts *bind.TransactOpts, collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "setup", collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Setup(collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Setup(&_DigitalReserveSystem.TransactOpts, collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Setup(collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Setup(&_DigitalReserveSystem.TransactOpts, collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// DigitalReserveSystemMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemMintIterator struct {
	Event *DigitalReserveSystemMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemMint represents a Mint event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemMint struct {
	AssetCode           string
	MintAmount          *big.Int
	AssetAddress        common.Address
	CollateralAssetCode [32]byte
	CollateralAmount    *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterMint(opts *bind.FilterOpts, assetAddress []common.Address, collateralAssetCode [][32]byte) (*DigitalReserveSystemMintIterator, error) {

	var assetAddressRule []interface{}
	for _, assetAddressItem := range assetAddress {
		assetAddressRule = append(assetAddressRule, assetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Mint", assetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemMintIterator{contract: _DigitalReserveSystem.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemMint, assetAddress []common.Address, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var assetAddressRule []interface{}
	for _, assetAddressItem := range assetAddress {
		assetAddressRule = append(assetAddressRule, assetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Mint", assetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemMint)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseMint(log types.Log) (*DigitalReserveSystemMint, error) {
	event := new(DigitalReserveSystemMint)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemRebalanceIterator is returned from FilterRebalance and is used to iterate over the raw logs and unpacked data for Rebalance events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRebalanceIterator struct {
	Event *DigitalReserveSystemRebalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemRebalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemRebalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemRebalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemRebalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemRebalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemRebalance represents a Rebalance event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRebalance struct {
	AssetCode           string
	CollateralAssetCode [32]byte
	RequiredAmount      *big.Int
	PresentAmount       *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRebalance is a free log retrieval operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterRebalance(opts *bind.FilterOpts, collateralAssetCode [][32]byte) (*DigitalReserveSystemRebalanceIterator, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Rebalance", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemRebalanceIterator{contract: _DigitalReserveSystem.contract, event: "Rebalance", logs: logs, sub: sub}, nil
}

// WatchRebalance is a free log subscription operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchRebalance(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemRebalance, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Rebalance", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemRebalance)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Rebalance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRebalance is a log parse operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseRebalance(log types.Log) (*DigitalReserveSystemRebalance, error) {
	event := new(DigitalReserveSystemRebalance)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Rebalance", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemRedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRedeemIterator struct {
	Event *DigitalReserveSystemRedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemRedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemRedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemRedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemRedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemRedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemRedeem represents a Redeem event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRedeem struct {
	AssetCode              string
	StableCreditAmount     *big.Int
	CollateralAssetAddress common.Address
	CollateralAssetCode    [32]byte
	CollateralAmount       *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterRedeem(opts *bind.FilterOpts, collateralAssetAddress []common.Address, collateralAssetCode [][32]byte) (*DigitalReserveSystemRedeemIterator, error) {

	var collateralAssetAddressRule []interface{}
	for _, collateralAssetAddressItem := range collateralAssetAddress {
		collateralAssetAddressRule = append(collateralAssetAddressRule, collateralAssetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Redeem", collateralAssetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemRedeemIterator{contract: _DigitalReserveSystem.contract, event: "Redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemRedeem, collateralAssetAddress []common.Address, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetAddressRule []interface{}
	for _, collateralAssetAddressItem := range collateralAssetAddress {
		collateralAssetAddressRule = append(collateralAssetAddressRule, collateralAssetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Redeem", collateralAssetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemRedeem)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseRedeem(log types.Log) (*DigitalReserveSystemRedeem, error) {
	event := new(DigitalReserveSystemRedeem)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Redeem", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemSetupIterator is returned from FilterSetup and is used to iterate over the raw logs and unpacked data for Setup events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemSetupIterator struct {
	Event *DigitalReserveSystemSetup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemSetupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemSetup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemSetup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemSetupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemSetupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemSetup represents a Setup event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemSetup struct {
	AssetCode           string
	PeggedCurrency      [32]byte
	PeggedValue         *big.Int
	CollateralAssetCode [32]byte
	AssetAddress        common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSetup is a free log retrieval operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterSetup(opts *bind.FilterOpts, collateralAssetCode [][32]byte) (*DigitalReserveSystemSetupIterator, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Setup", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemSetupIterator{contract: _DigitalReserveSystem.contract, event: "Setup", logs: logs, sub: sub}, nil
}

// WatchSetup is a free log subscription operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchSetup(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemSetup, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Setup", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemSetup)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Setup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetup is a log parse operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseSetup(log types.Log) (*DigitalReserveSystemSetup, error) {
	event := new(DigitalReserveSystemSetup)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Setup", log); err != nil {
		return nil, err
	}
	return event, nil
}
