// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vabi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DigitalReserveSystemABI is the input ABI used to generate the binding from.
const DigitalReserveSystemABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"heartAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presentAmount\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableCreditAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAssetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peggedCurrency\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"peggedValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"Setup\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"heart\",\"outputs\":[{\"internalType\":\"contractIHeart\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"collateralAssetCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"peggedCurrency\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"peggedValue\",\"type\":\"uint256\"}],\"name\":\"setup\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"netCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"mintFromCollateralAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"mintFromStableCreditAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stableCreditAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"rebalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"assetCode\",\"type\":\"string\"}],\"name\":\"collateralHealthCheck\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// DigitalReserveSystemBin is the compiled bytecode used for deploying new contracts.
var DigitalReserveSystemBin = "0x608060405234801561001057600080fd5b506040516152473803806152478339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556151e2806100656000396000f3fe608060405260043610620000865760003560e01c8063cbbaa9a01162000055578063cbbaa9a014620002b7578063f15821f714620003d9578063f58d1c941462000454578063ff4b203214620004885762000086565b806324b76fd5146200008b57806341212e9e146200012857806348268143146200019c57806399bbfd72146200023c575b600080fd5b3480156200009857600080fd5b506200011460048036036040811015620000b157600080fd5b81359190810190604081016020820135600160201b811115620000d357600080fd5b820183602082011115620000e657600080fd5b803590602001918460018302840111600160201b831117156200010857600080fd5b50909250905062000593565b604080519115158252519081900360200190f35b62000114600480360360208110156200014057600080fd5b810190602081018135600160201b8111156200015b57600080fd5b8201836020820111156200016e57600080fd5b803590602001918460018302840111600160201b831117156200019057600080fd5b50909250905062000889565b348015620001a957600080fd5b506200021e60048036036020811015620001c257600080fd5b810190602081018135600160201b811115620001dd57600080fd5b820183602082011115620001f057600080fd5b803590602001918460018302840111600160201b831117156200021257600080fd5b509092509050620008d5565b60408051938452602084019290925282820152519081900360600190f35b62000114600480360360408110156200025457600080fd5b81359190810190604081016020820135600160201b8111156200027657600080fd5b8201836020820111156200028957600080fd5b803590602001918460018302840111600160201b83111715620002ab57600080fd5b50909250905062000b2c565b348015620002c457600080fd5b506200034560048036036080811015620002dd57600080fd5b813591602081013591810190606081016040820135600160201b8111156200030457600080fd5b8201836020820111156200031757600080fd5b803590602001918460018302840111600160201b831117156200033957600080fd5b91935091503562000f46565b6040518080602001836001600160a01b03166001600160a01b03168152602001828103825284818151815260200191508051906020019080838360005b838110156200039c57818101518382015260200162000382565b50505050905090810190601f168015620003ca5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6200011460048036036040811015620003f157600080fd5b81359190810190604081016020820135600160201b8111156200041357600080fd5b8201836020820111156200042657600080fd5b803590602001918460018302840111600160201b831117156200044857600080fd5b509092509050620016f7565b3480156200046157600080fd5b506200046c62001b11565b604080516001600160a01b039092168252519081900360200190f35b3480156200049557600080fd5b506200050a60048036036020811015620004ae57600080fd5b810190602081018135600160201b811115620004c957600080fd5b820183602082011115620004dc57600080fd5b803590602001918460018302840111600160201b83111715620004fe57600080fd5b50909250905062001b20565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015620005555781810151838201526020016200053b565b50505050905090810190601f168015620005835780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6000808411620005d55760405162461bcd60e51b8152600401808060200182810382526041815260200180620050156041913960600191505060405180910390fd5b8115801590620005e65750600c8211155b620006235760405162461bcd60e51b815260040180806020018281038252603581526020018062004e046035913960400191505060405180910390fd5b6000806000806200066a87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c2092505050565b929650909450925090506001600160a01b038316620006bb5760405162461bcd60e51b815260040180806020018281038252603f81526020018062004e39603f913960400191505060405180910390fd5b620006fc87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620021b292505050565b5060006200070b8583620026e2565b905060006200073662989680620007298c8563ffffffff6200295116565b9063ffffffff620029af16565b60408051632b83cccd60e01b8152336004820152602481018d90526044810183905290519192506001600160a01b03881691632b83cccd9160648082019260009290919082900301818387803b1580156200079057600080fd5b505af1158015620007a5573d6000803e3d6000fd5b50505050856001600160a01b0316632664ecf96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620007e557600080fd5b505af1158015620007fa573d6000803e3d6000fd5b5050505083856001600160a01b03167fa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e8b8b8e8660405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019998505050505050505050565b6000620008cc83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620021b292505050565b90505b92915050565b600080808315801590620008ea5750600c8411155b620009275760405162461bcd60e51b815260040180806020018281038252604481526020018062004dc06044913960600191505060405180910390fd5b6000806000806200096e89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c2092505050565b929650909450925090506001600160a01b038316620009bf5760405162461bcd60e51b815260040180806020018281038252604e81526020018062005121604e913960600191505060405180910390fd5b600062000a358583876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a0157600080fd5b505afa15801562000a16573d6000803e3d6000fd5b505050506040513d602081101562000a2d57600080fd5b5051620029f3565b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a7357600080fd5b505afa15801562000a88573d6000803e3d6000fd5b505050506040513d602081101562000a9f57600080fd5b5051604080516370a0823160e01b81526001600160a01b038981166004830152915191909216916370a08231916024808301926020929190829003018186803b15801562000aec57600080fd5b505afa15801562000b01573d6000803e3d6000fd5b505050506040513d602081101562000b1857600080fd5b5051939b919a509298509650505050505050565b60008054604080516311270edd60e21b815233600482015290516001600160a01b039092169163449c3b7491602480820192602092909190829003018186803b15801562000b7957600080fd5b505afa15801562000b8e573d6000803e3d6000fd5b505050506040513d602081101562000ba557600080fd5b505162000be45760405162461bcd60e51b815260040180806020018281038252604981526020018062004f106049913960600191505060405180910390fd5b60008060008062000c2b87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c2092505050565b935093509350935060008060008062000e9a8c6000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c8c57600080fd5b505afa15801562000ca1573d6000803e3d6000fd5b505050506040513d602081101562000cb857600080fd5b5051604080516389dbe24b60e01b8152600481018a905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b15801562000d0457600080fd5b505afa15801562000d19573d6000803e3d6000fd5b505050506040513d602081101562000d3057600080fd5b50516000546040805163016b3a1160e01b815290516001600160a01b039092169163016b3a1191600480820192602092909190829003018186803b15801562000d7857600080fd5b505afa15801562000d8d573d6000803e3d6000fd5b505050506040513d602081101562000da457600080fd5b5051600054604080516307dbcf5960e11b8152600481018d905290516001600160a01b0390921691630fb79eb291602480820192602092909190829003018186803b15801562000df357600080fd5b505afa15801562000e08573d6000803e3d6000fd5b505050506040513d602081101562000e1f57600080fd5b505160408051633cf252a960e01b815290516001600160a01b038f1691633cf252a9916004808301926020929190829003018186803b15801562000e6257600080fd5b505afa15801562000e77573d6000803e3d6000fd5b505050506040513d602081101562000e8e57600080fd5b50516298968062002b65565b935093509350935062000eb287898e84878762002c33565b5060008c905086896001600160a01b03167fddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc8e8e858a60405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019c9b505050505050505050505050565b60008054604080516311270edd60e21b81523360048201529051606093926001600160a01b03169163449c3b74916024808301926020929190829003018186803b15801562000f9457600080fd5b505afa15801562000fa9573d6000803e3d6000fd5b505050506040513d602081101562000fc057600080fd5b505162000fff5760405162461bcd60e51b815260040180806020018281038252604981526020018062004f106049913960600191505060405180910390fd5b8315801590620010105750600c8411155b6200104d5760405162461bcd60e51b8152600401808060200182810382526034815260200180620050566034913960400191505060405180910390fd5b60405163c2bebec760e01b81526020600482019081526024820186905260009173__Hasher________________________________9163c2bebec791899189918190604401848480828437600083820152604051601f909101601f191690920195506020945090925050508083038186803b158015620010cc57600080fd5b505af4158015620010e1573d6000803e3d6000fd5b505050506040513d6020811015620010f857600080fd5b505160008054604080516378f23b5360e11b815260048101859052905193945091926001600160a01b039091169163f1e476a6916024808301926020929190829003018186803b1580156200114c57600080fd5b505afa15801562001161573d6000803e3d6000fd5b505050506040513d60208110156200117857600080fd5b505190506001600160a01b03811615620011c45760405162461bcd60e51b815260040180806020018281038252603b81526020018062004f59603b913960400191505060405180910390fd5b600080546040805163d476f04b60e01b8152600481018d905290516001600160a01b039092169163d476f04b91602480820192602092909190829003018186803b1580156200121257600080fd5b505afa15801562001227573d6000803e3d6000fd5b505050506040513d60208110156200123e57600080fd5b505190506001600160a01b038116620012895760405162461bcd60e51b815260040180806020018281038252603e81526020018062004eb1603e913960400191505060405180910390fd5b600073__Hasher________________________________63b42998008c8c6040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015620012e357600080fd5b505af4158015620012f8573d6000803e3d6000fd5b505050506040513d60208110156200130f57600080fd5b50516000546040805163c084770d60e01b81526004810184905290519293506001600160a01b039091169163c084770d91602480820192602092909190829003018186803b1580156200136157600080fd5b505afa15801562001376573d6000803e3d6000fd5b505050506040513d60208110156200138d57600080fd5b5051620013cc5760405162461bcd60e51b815260040180806020018281038252605481526020018062004d326054913960600191505060405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200141c57600080fd5b505afa15801562001431573d6000803e3d6000fd5b505050506040513d60208110156200144857600080fd5b5051604080516389dbe24b60e01b81526004810185905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b1580156200149457600080fd5b505afa158015620014a9573d6000803e3d6000fd5b505050506040513d6020811015620014c057600080fd5b505111620015005760405162461bcd60e51b81526004018080602001828103825260458152602001806200508a6045913960600191505060405180910390fd5b60008a338d858d8d8d6000809054906101000a90046001600160a01b03166040516200152c9062003339565b8881526001600160a01b03808916602083015260408201889052868116606083015260a08201849052821660c082015260e06080820181815290820185905261010082018686808284376000838201819052604051601f909201601f19169093018190039c509a509098505050505050505050f080158015620015b3573d6000803e3d6000fd5b506000805460408051635d99b3a560e11b81526001600160a01b038086166004830152915194955091169263bb33674a9260248084019391929182900301818387803b1580156200160357600080fd5b505af115801562001618573d6000803e3d6000fd5b505050508b7fcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df8b8b8e8c866040518080602001858152602001848152602001836001600160a01b03166001600160a01b031681526020018281038252878782818152602001925080828437600083820152604051601f909101601f19169092018290039850909650505050505050a289898282828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929c50929a50505050505050505050509550959350505050565b60008054604080516311270edd60e21b815233600482015290516001600160a01b039092169163449c3b7491602480820192602092909190829003018186803b1580156200174457600080fd5b505afa15801562001759573d6000803e3d6000fd5b505050506040513d60208110156200177057600080fd5b5051620017af5760405162461bcd60e51b815260040180806020018281038252604981526020018062004f106049913960600191505060405180910390fd5b600080600080620017f687878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c2092505050565b935093509350935060008060008062001a658c6000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200185757600080fd5b505afa1580156200186c573d6000803e3d6000fd5b505050506040513d60208110156200188357600080fd5b5051604080516389dbe24b60e01b8152600481018a905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b158015620018cf57600080fd5b505afa158015620018e4573d6000803e3d6000fd5b505050506040513d6020811015620018fb57600080fd5b50516000546040805163016b3a1160e01b815290516001600160a01b039092169163016b3a1191600480820192602092909190829003018186803b1580156200194357600080fd5b505afa15801562001958573d6000803e3d6000fd5b505050506040513d60208110156200196f57600080fd5b5051600054604080516307dbcf5960e11b8152600481018d905290516001600160a01b0390921691630fb79eb291602480820192602092909190829003018186803b158015620019be57600080fd5b505afa158015620019d3573d6000803e3d6000fd5b505050506040513d6020811015620019ea57600080fd5b505160408051633cf252a960e01b815290516001600160a01b038f1691633cf252a9916004808301926020929190829003018186803b15801562001a2d57600080fd5b505afa15801562001a42573d6000803e3d6000fd5b505050506040513d602081101562001a5957600080fd5b505162989680620030d9565b935093509350935062001a7d87898684878762002c33565b5060008c905086896001600160a01b03167fddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc8e8e898660405180806020018481526020018381526020018281038252868682818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a35060019c9b505050505050505050505050565b6000546001600160a01b031681565b6060600080831580159062001b365750600c8411155b62001b735760405162461bcd60e51b815260040180806020018281038252603a81526020018062004d86603a913960400191505060405180910390fd5b600080600062001bb988888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001c2092505050565b93509350509250600062001bce8483620026e2565b90508888848383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929d50939b509199505050505050505050509250925092565b6000805460405163c2bebec760e01b815260206004820181815285516024840152855185948594859485946001600160a01b039093169363f1e476a69373__Hasher________________________________9363c2bebec7938d938392604401918501908083838d5b8381101562001ca357818101518382015260200162001c89565b50505050905090810190601f16801562001cd15780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801562001cef57600080fd5b505af415801562001d04573d6000803e3d6000fd5b505050506040513d602081101562001d1b57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b15801562001d5b57600080fd5b505afa15801562001d70573d6000803e3d6000fd5b505050506040513d602081101562001d8757600080fd5b505190506001600160a01b03811662001dd25760405162461bcd60e51b815260040180806020018281038252603f8152602001806200516f603f913960400191505060405180910390fd5b6000816001600160a01b0316635312424c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e0e57600080fd5b505afa15801562001e23573d6000803e3d6000fd5b505050506040513d602081101562001e3a57600080fd5b5051600080546040805163d476f04b60e01b815260048101859052905193945091926001600160a01b039091169163d476f04b916024808301926020929190829003018186803b15801562001e8e57600080fd5b505afa15801562001ea3573d6000803e3d6000fd5b505050506040513d602081101562001eba57600080fd5b50516040805163d8dfeb4560e01b815290519192506001600160a01b0385169163d8dfeb4591600480820192602092909190829003018186803b15801562001f0157600080fd5b505afa15801562001f16573d6000803e3d6000fd5b505050506040513d602081101562001f2d57600080fd5b50516001600160a01b0382811691161462001f7a5760405162461bcd60e51b815260040180806020018281038252604981526020018062004fcc6049913960600191505060405180910390fd5b600073__Hasher________________________________63b429980084866001600160a01b031663aefee60e6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001fd157600080fd5b505afa15801562001fe6573d6000803e3d6000fd5b505050506040513d602081101562001ffd57600080fd5b5051604080516001600160e01b031960e086901b16815260048101939093526024830191909152516044808301926020929190829003018186803b1580156200204557600080fd5b505af41580156200205a573d6000803e3d6000fd5b505050506040513d60208110156200207157600080fd5b50516000805460408051630794e3db60e41b8152905193945091926001600160a01b039091169163794e3db0916004808301926020929190829003018186803b158015620020be57600080fd5b505afa158015620020d3573d6000803e3d6000fd5b505050506040513d6020811015620020ea57600080fd5b5051604080516389dbe24b60e01b81526004810185905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b1580156200213657600080fd5b505afa1580156200214b573d6000803e3d6000fd5b505050506040513d60208110156200216257600080fd5b505111620021a25760405162461bcd60e51b8152600401808060200182810382526052815260200180620050cf6052913960600191505060405180910390fd5b9296509450925090509193509193565b6000808251118015620021c75750600c825111155b620022045760405162461bcd60e51b815260040180806020018281038252603881526020018062004f946038913960400191505060405180910390fd5b600080600080620022158662001c20565b929650909450925090506001600160a01b038316620022665760405162461bcd60e51b815260040180806020018281038252604281526020018062004cf06042913960600191505060405180910390fd5b6000620022a88583876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a0157600080fd5b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015620022e657600080fd5b505afa158015620022fb573d6000803e3d6000fd5b505050506040513d60208110156200231257600080fd5b5051604080516370a0823160e01b81526001600160a01b038981166004830152915191909216916370a08231916024808301926020929190829003018186803b1580156200235f57600080fd5b505afa15801562002374573d6000803e3d6000fd5b505050506040513d60208110156200238b57600080fd5b5051905081811415620023d05760405162461bcd60e51b815260040180806020018281038252603981526020018062004e786039913960400191505060405180910390fd5b60008060009054906101000a90046001600160a01b03166001600160a01b03166381c210f86040518163ffffffff1660e01b815260040160206040518083038186803b1580156200242057600080fd5b505afa15801562002435573d6000803e3d6000fd5b505050506040513d60208110156200244c57600080fd5b5051905081831115620024f2576001600160a01b0381166348fafdf686896200247c878763ffffffff6200319616565b6040518463ffffffff1660e01b815260040180848152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015620024d357600080fd5b505af1158015620024e8573d6000803e3d6000fd5b5050505062002627565b6000546040805163d476f04b60e01b81526004810188905290516001600160a01b039092169163d476f04b91602480820192602092909190829003018186803b1580156200253f57600080fd5b505afa15801562002554573d6000803e3d6000fd5b505050506040513d60208110156200256b57600080fd5b50516001600160a01b03166323b872dd88836200258f868863ffffffff6200319616565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015620025f857600080fd5b505af11580156200260d573d6000803e3d6000fd5b505050506040513d60208110156200262457600080fd5b50505b847e8e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded3125718a85856040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015620026965781810151838201526020016200267c565b50505050905090810190601f168015620026c45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a250600198975050505050505050565b600080620029496000809054906101000a90046001600160a01b03166001600160a01b031663794e3db06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200273757600080fd5b505afa1580156200274c573d6000803e3d6000fd5b505050506040513d60208110156200276357600080fd5b5051604080516389dbe24b60e01b81526004810187905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b158015620027af57600080fd5b505afa158015620027c4573d6000803e3d6000fd5b505050506040513d6020811015620027db57600080fd5b505160408051633cf252a960e01b8152905162000729916001600160a01b03891691633cf252a991600480820192602092909190829003018186803b1580156200282457600080fd5b505afa15801562002839573d6000803e3d6000fd5b505050506040513d60208110156200285057600080fd5b5051600054604080516314c4909360e21b815290516001600160a01b0392831692630fb79eb292908c1691635312424c91600480820192602092909190829003018186803b158015620028a257600080fd5b505afa158015620028b7573d6000803e3d6000fd5b505050506040513d6020811015620028ce57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b1580156200290e57600080fd5b505afa15801562002923573d6000803e3d6000fd5b505050506040513d60208110156200293a57600080fd5b50519063ffffffff6200295116565b949350505050565b6000826200296257506000620008cf565b828202828482816200297057fe5b0414620008cc5760405162461bcd60e51b815260040180806020018281038252602181526020018062004eef6021913960400191505060405180910390fd5b6000620008cc83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250620031da565b6000805460408051630794e3db60e41b8152905162002949926001600160a01b03169163794e3db0916004808301926020929190829003018186803b15801562002a3c57600080fd5b505afa15801562002a51573d6000803e3d6000fd5b505050506040513d602081101562002a6857600080fd5b5051604080516389dbe24b60e01b81526004810187905290516001600160a01b03909216916389dbe24b91602480820192602092909190829003018186803b15801562002ab457600080fd5b505afa15801562002ac9573d6000803e3d6000fd5b505050506040513d602081101562002ae057600080fd5b505160408051633cf252a960e01b8152905162000729916001600160a01b03891691633cf252a991600480820192602092909190829003018186803b15801562002b2957600080fd5b505afa15801562002b3e573d6000803e3d6000fd5b505050506040513d602081101562002b5557600080fd5b5051859063ffffffff6200295116565b60008080808062002b8f8762002b828d8b63ffffffff6200295116565b9063ffffffff6200295116565b905062002ba88662000729838d63ffffffff620029af16565b9050600062002bd462002bc2888c63ffffffff6200319616565b62000729848d63ffffffff6200295116565b9050600062002bea838363ffffffff6200328116565b9050600062002c058b62000729868c63ffffffff6200295116565b9050600062002c1b858363ffffffff6200319616565b929f919e50919c50919a509098505050505050505050565b600080866001600160a01b0316635312424c6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002c7057600080fd5b505afa15801562002c85573d6000803e3d6000fd5b505050506040513d602081101562002c9c57600080fd5b505160008054604080516323b872dd60e01b81523360048201526001600160a01b039283166024820152604481018a90529051939450908b16926323b872dd92606480840193602093929083900390910190829087803b15801562002d0057600080fd5b505af115801562002d15573d6000803e3d6000fd5b505050506040513d602081101562002d2c57600080fd5b5050604080516323b872dd60e01b81523360048201526001600160a01b038981166024830152604482018790529151918a16916323b872dd916064808201926020929091908290030181600087803b15801562002d8857600080fd5b505af115801562002d9d573d6000803e3d6000fd5b505050506040513d602081101562002db457600080fd5b5050604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b038a16916323b872dd9160648083019260209291908290030181600087803b15801562002e0c57600080fd5b505af115801562002e21573d6000803e3d6000fd5b505050506040513d602081101562002e3857600080fd5b50506000805460408051631038421f60e31b815290516001600160a01b03909216916381c210f891600480820192602092909190829003018186803b15801562002e8157600080fd5b505afa15801562002e96573d6000803e3d6000fd5b505050506040513d602081101562002ead57600080fd5b50516040805163095ea7b360e01b81526001600160a01b038084166004830152602482018890529151929350908b169163095ea7b3916044808201926020929091908290030181600087803b15801562002f0657600080fd5b505af115801562002f1b573d6000803e3d6000fd5b505050506040513d602081101562002f3257600080fd5b505060408051637f5f93db60e11b8152600481018490523060248201526044810186905290516001600160a01b0383169163febf27b691606480830192600092919082900301818387803b15801562002f8a57600080fd5b505af115801562002f9f573d6000803e3d6000fd5b5050604080516340c10f1960e01b8152336004820152602481018b905290516001600160a01b038c1693506340c10f199250604480830192600092919082900301818387803b15801562002ff257600080fd5b505af115801562003007573d6000803e3d6000fd5b50505050876001600160a01b0316632664ecf96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200304757600080fd5b505af11580156200305c573d6000803e3d6000fd5b5050600080546040805162b8d7ab60e11b8152600481018c90526024810188905290516001600160a01b039092169450630171af569350604480820193929182900301818387803b158015620030b157600080fd5b505af1158015620030c6573d6000803e3d6000fd5b5060019c9b505050505050505050505050565b600080808080620030f686620007298d8c63ffffffff6200295116565b905060006200310c8c8363ffffffff6200319616565b90506000620031278862002b82848f63ffffffff6200295116565b90506200314d6200313f8b8b63ffffffff6200295116565b829063ffffffff620029af16565b90506000620031688b62000729858c63ffffffff6200295116565b905060006200317e848363ffffffff6200319616565b929f919e50919c50929a509198505050505050505050565b6000620008cc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250620032dc565b600081836200326a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200322e57818101518382015260200162003214565b50505050905090810190601f1680156200325c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816200327757fe5b0495945050505050565b600082820183811015620008cc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008184841115620033315760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156200322e57818101518382015260200162003214565b505050900390565b6119a880620033488339019056fe60806040523480156200001157600080fd5b50604051620019a8380380620019a8833981810160405260e08110156200003757600080fd5b81516020830151604080850151606086015160808701805193519597949692959194919392820192846401000000008211156200007357600080fd5b9083019060208201858111156200008957600080fd5b8251640100000000811182820188101715620000a457600080fd5b82525081516020918201929091019080838360005b83811015620000d3578181015183820152602001620000b9565b50505050905090810190601f168015620001015780820380516001836020036101000a031916815260200191505b50604090815260208281015192909101518551929450925084918291600791620001329160039190850190620001c3565b50815162000148906004906020850190620001c3565b5060058054600a80546001600160a01b03199081166001600160a01b039d8e161790915560089790975560099b909b5560068054909616978a1697909717909455505060079490945560ff1990951660ff90951694909417610100600160a81b03191661010092909316919091029190911790555062000268565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200020657805160ff191683800117855562000236565b8280016001018555821562000236579182015b828111156200023657825182559160200191906001019062000219565b506200024492915062000248565b5090565b6200026591905b808211156200024457600081556001016200024f565b90565b61173080620002786000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806349bf0f2d116100de5780639dc29fac11610097578063aefee60e11610071578063aefee60e1461045e578063d8dfeb4514610466578063dd62ed3e1461046e578063f58d1c941461049c57610173565b80639dc29fac146103da578063a457c2d714610406578063a9059cbb1461043257610173565b806349bf0f2d1461036b5780634e841e3e146103945780635312424c1461039c5780635d1ca631146103a457806370a08231146103ac57806395d89b41146103d257610173565b80632664ecf9116101305780632664ecf9146102b15780632b83cccd146102bb578063313ce567146102ed578063395093511461030b5780633cf252a91461033757806340c10f191461033f57610173565b806306fdde0314610178578063095ea7b3146101f557806318160ddd146102355780631e2650de1461024f57806320dc407a1461027357806323b872dd1461027b575b600080fd5b6101806104a4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102216004803603604081101561020b57600080fd5b506001600160a01b03813516906020013561053a565b604080519115158252519081900360200190f35b61023d610557565b60408051918252519081900360200190f35b61025761055d565b604080516001600160a01b039092168252519081900360200190f35b61025761056c565b6102216004803603606081101561029157600080fd5b506001600160a01b0381358116916020810135909116906040013561057b565b6102b9610608565b005b6102b9600480360360608110156102d157600080fd5b506001600160a01b0381351690602081013590604001356107cb565b6102f5610923565b6040805160ff9092168252519081900360200190f35b6102216004803603604081101561032157600080fd5b506001600160a01b03813516906020013561092c565b61023d610980565b6102b96004803603604081101561035557600080fd5b506001600160a01b038135169060200135610986565b610373610a56565b604080519283526001600160a01b0390911660208301528051918290030190f35b610180610ae7565b61023d610c14565b61023d610c1a565b61023d600480360360208110156103c257600080fd5b50356001600160a01b0316610e23565b610180610e3e565b6102b9600480360360408110156103f057600080fd5b506001600160a01b038135169060200135610e9f565b6102216004803603604081101561041c57600080fd5b506001600160a01b038135169060200135610f6f565b6102216004803603604081101561044857600080fd5b506001600160a01b038135169060200135610fdd565b61023d610ff1565b610257610ff7565b61023d6004803603604081101561048457600080fd5b506001600160a01b0381358116916020013516611006565b610257611031565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b5050505050905090565b600061054e610547611045565b8484611049565b50600192915050565b60025490565b600b546001600160a01b031681565b600a546001600160a01b031681565b6000610588848484611135565b6105fe84610594611045565b6105f985604051806060016040528060288152602001611645602891396001600160a01b038a166000908152600160205260408120906105d2611045565b6001600160a01b03168152602081019190915260400160002054919063ffffffff61129116565b611049565b5060019392505050565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d602081101561067b57600080fd5b50516001600160a01b0316146106ce576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b600654604080516370a0823160e01b815230600482015290516001600160a01b039092169163095ea7b391339184916370a08231916024808301926020929190829003018186803b15801561072257600080fd5b505afa158015610736573d6000803e3d6000fd5b505050506040513d602081101561074c57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b505050506040513d60208110156107c757600080fd5b5050565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b15801561081457600080fd5b505afa158015610828573d6000803e3d6000fd5b505050506040513d602081101561083e57600080fd5b50516001600160a01b031614610891576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6006546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156108e757600080fd5b505af11580156108fb573d6000803e3d6000fd5b505050506040513d602081101561091157600080fd5b5061091e90508383611328565b505050565b60055460ff1690565b600061054e610939611045565b846105f9856001600061094a611045565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549063ffffffff61142416565b60085481565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b1580156109cf57600080fd5b505afa1580156109e3573d6000803e3d6000fd5b505050506040513d60208110156109f957600080fd5b50516001600160a01b031614610a4c576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6107c78282611485565b600654604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015610aa657600080fd5b505afa158015610aba573d6000803e3d6000fd5b505050506040513d6020811015610ad057600080fd5b50516006549092506001600160a01b031690509091565b6060306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610b2257600080fd5b505afa158015610b36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b5f57600080fd5b8101908080516040519392919084640100000000821115610b7f57600080fd5b908301906020820185811115610b9457600080fd5b8251640100000000811182820188101715610bae57600080fd5b82525081516020918201929091019080838360005b83811015610bdb578181015183820152602001610bc3565b50505050905090810190601f168015610c085780820380516001836020036101000a031916815260200191505b50604052505050905090565b60075481565b600073__Hasher________________________________63c2bebec7306001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cac57600080fd5b8101908080516040519392919084640100000000821115610ccc57600080fd5b908301906020820185811115610ce157600080fd5b8251640100000000811182820188101715610cfb57600080fd5b82525081516020918201929091019080838360005b83811015610d28578181015183820152602001610d10565b50505050905090810190601f168015610d555780820380516001836020036101000a031916815260200191505b506040525050506040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610da8578181015183820152602001610d90565b50505050905090810190601f168015610dd55780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610df257600080fd5b505af4158015610e06573d6000803e3d6000fd5b505050506040513d6020811015610e1c57600080fd5b5051905090565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105305780601f1061050557610100808354040283529160200191610530565b600554604080516370fa9a6d60e01b81529051339261010090046001600160a01b0316916370fa9a6d916004808301926020929190829003018186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d6020811015610f1257600080fd5b50516001600160a01b031614610f65576040805162461bcd60e51b815260206004820152601360248201527263616c6c6572206973206e6f7420445253534360681b604482015290519081900360640190fd5b6107c78282611328565b600061054e610f7c611045565b846105f9856040518060600160405280602581526020016116d76025913960016000610fa6611045565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919063ffffffff61129116565b600061054e610fea611045565b8484611135565b60095481565b6006546001600160a01b031681565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055461010090046001600160a01b031681565b3390565b6001600160a01b03831661108e5760405162461bcd60e51b81526004018080602001828103825260248152602001806116b36024913960400191505060405180910390fd5b6001600160a01b0382166110d35760405162461bcd60e51b81526004018080602001828103825260228152602001806115fd6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b03831661117a5760405162461bcd60e51b815260040180806020018281038252602581526020018061168e6025913960400191505060405180910390fd5b6001600160a01b0382166111bf5760405162461bcd60e51b81526004018080602001828103825260238152602001806115b86023913960400191505060405180910390fd5b6112028160405180606001604052806026815260200161161f602691396001600160a01b038616600090815260208190526040902054919063ffffffff61129116565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611237908263ffffffff61142416565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156113205760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112e55781810151838201526020016112cd565b50505050905090810190601f1680156113125780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b03821661136d5760405162461bcd60e51b815260040180806020018281038252602181526020018061166d6021913960400191505060405180910390fd5b6113b0816040518060600160405280602281526020016115db602291396001600160a01b038516600090815260208190526040902054919063ffffffff61129116565b6001600160a01b0383166000908152602081905260409020556002546113dc908263ffffffff61157516565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60008282018381101561147e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b0382166114e0576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6002546114f3908263ffffffff61142416565b6002556001600160a01b03821660009081526020819052604090205461151f908263ffffffff61142416565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600061147e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061129156fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820245d677aba950e387a73b81e971f5b0caab9cb4b24702ce79d742edbc70fc8b164736f6c634300050c00324469676974616c5265736572766553797374656d2e726562616c616e63653a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e73657475703a20636f6c6c61746572616c4173736574436f6465202d2070656767656443757272656e6379207061697220646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e67657445786368616e67653a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e636f6c6c61746572616c4865616c7468436865636b3a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e72656465656d3a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e72656465656d3a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e726562616c616e63653a20726562616c616e6365206973206e6f742072657175697265644469676974616c5265736572766553797374656d2e73657475703a20636f6c6c61746572616c4173736574436f646520646f6573206e6f74206578697374536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774469676974616c5265736572766553797374656d2e6f6e6c7954727573746564506172746e65723a2063616c6c6572206d7573742062652061207472757374656420706172746e65724469676974616c5265736572766553797374656d2e73657475703a206173736574436f64652068617320616c7265616479206265656e20757365644469676974616c5265736572766553797374656d2e726562616c616e63653a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a20636f6c6c61746572616c4173736574206d757374206265207468652073616d654469676974616c5265736572766553797374656d2e72656465656d3a2072656465656d20616d6f756e74206d7573742062652067726561746572207468616e20304469676974616c5265736572766553797374656d2e73657475703a20696e76616c6964206173736574436f646520666f726d61744469676974616c5265736572766553797374656d2e73657475703a207072696365206f66206c696e6b206d75737420686176652076616c7565206d6f7265207468616e20304469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a207072696365206f66206c696e6b206d75737420686176652076616c7565206d6f7265207468616e20304469676974616c5265736572766553797374656d2e636f6c6c61746572616c4865616c7468436865636b3a20636f6c6c61746572616c4173736574436f646520646f6573206e6f742065786973744469676974616c5265736572766553797374656d2e5f76616c69646174654173736574436f64653a20737461626c65437265646974206e6f74206578697374a265627a7a72315820475a1be95ebc713dde93a7ed735072768cc0ee8a866306b3c74f4197e6de0b0064736f6c634300050c0032"

// DeployDigitalReserveSystem deploys a new Ethereum contract, binding an instance of DigitalReserveSystem to it.
func DeployDigitalReserveSystem(auth *bind.TransactOpts, backend bind.ContractBackend, heartAddr common.Address) (common.Address, *types.Transaction, *DigitalReserveSystem, error) {
	parsed, err := abi.JSON(strings.NewReader(DigitalReserveSystemABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DigitalReserveSystemBin), backend, heartAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DigitalReserveSystem{DigitalReserveSystemCaller: DigitalReserveSystemCaller{contract: contract}, DigitalReserveSystemTransactor: DigitalReserveSystemTransactor{contract: contract}, DigitalReserveSystemFilterer: DigitalReserveSystemFilterer{contract: contract}}, nil
}

// DigitalReserveSystem is an auto generated Go binding around an Ethereum contract.
type DigitalReserveSystem struct {
	DigitalReserveSystemCaller     // Read-only binding to the contract
	DigitalReserveSystemTransactor // Write-only binding to the contract
	DigitalReserveSystemFilterer   // Log filterer for contract events
}

// DigitalReserveSystemCaller is an auto generated read-only Go binding around an Ethereum contract.
type DigitalReserveSystemCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DigitalReserveSystemTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DigitalReserveSystemFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DigitalReserveSystemSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DigitalReserveSystemSession struct {
	Contract     *DigitalReserveSystem // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DigitalReserveSystemCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DigitalReserveSystemCallerSession struct {
	Contract *DigitalReserveSystemCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// DigitalReserveSystemTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DigitalReserveSystemTransactorSession struct {
	Contract     *DigitalReserveSystemTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// DigitalReserveSystemRaw is an auto generated low-level Go binding around an Ethereum contract.
type DigitalReserveSystemRaw struct {
	Contract *DigitalReserveSystem // Generic contract binding to access the raw methods on
}

// DigitalReserveSystemCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DigitalReserveSystemCallerRaw struct {
	Contract *DigitalReserveSystemCaller // Generic read-only contract binding to access the raw methods on
}

// DigitalReserveSystemTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DigitalReserveSystemTransactorRaw struct {
	Contract *DigitalReserveSystemTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDigitalReserveSystem creates a new instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystem(address common.Address, backend bind.ContractBackend) (*DigitalReserveSystem, error) {
	contract, err := bindDigitalReserveSystem(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystem{DigitalReserveSystemCaller: DigitalReserveSystemCaller{contract: contract}, DigitalReserveSystemTransactor: DigitalReserveSystemTransactor{contract: contract}, DigitalReserveSystemFilterer: DigitalReserveSystemFilterer{contract: contract}}, nil
}

// NewDigitalReserveSystemCaller creates a new read-only instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemCaller(address common.Address, caller bind.ContractCaller) (*DigitalReserveSystemCaller, error) {
	contract, err := bindDigitalReserveSystem(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemCaller{contract: contract}, nil
}

// NewDigitalReserveSystemTransactor creates a new write-only instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemTransactor(address common.Address, transactor bind.ContractTransactor) (*DigitalReserveSystemTransactor, error) {
	contract, err := bindDigitalReserveSystem(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemTransactor{contract: contract}, nil
}

// NewDigitalReserveSystemFilterer creates a new log filterer instance of DigitalReserveSystem, bound to a specific deployed contract.
func NewDigitalReserveSystemFilterer(address common.Address, filterer bind.ContractFilterer) (*DigitalReserveSystemFilterer, error) {
	contract, err := bindDigitalReserveSystem(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemFilterer{contract: contract}, nil
}

// bindDigitalReserveSystem binds a generic wrapper to an already deployed contract.
func bindDigitalReserveSystem(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DigitalReserveSystemABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DigitalReserveSystem *DigitalReserveSystemRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.DigitalReserveSystemTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DigitalReserveSystem *DigitalReserveSystemCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DigitalReserveSystem.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DigitalReserveSystem *DigitalReserveSystemTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DigitalReserveSystem *DigitalReserveSystemTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.contract.Transact(opts, method, params...)
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) CollateralHealthCheck(opts *bind.CallOpts, assetCode string) ([32]byte, *big.Int, *big.Int, error) {
	var (
		ret0 = new([32]byte)
		ret1 = new(*big.Int)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _DigitalReserveSystem.contract.Call(opts, out, "collateralHealthCheck", assetCode)
	return *ret0, *ret1, *ret2, err
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemSession) CollateralHealthCheck(assetCode string) ([32]byte, *big.Int, *big.Int, error) {
	return _DigitalReserveSystem.Contract.CollateralHealthCheck(&_DigitalReserveSystem.CallOpts, assetCode)
}

// CollateralHealthCheck is a free data retrieval call binding the contract method 0x48268143.
//
// Solidity: function collateralHealthCheck(string assetCode) constant returns(bytes32, uint256, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) CollateralHealthCheck(assetCode string) ([32]byte, *big.Int, *big.Int, error) {
	return _DigitalReserveSystem.Contract.CollateralHealthCheck(&_DigitalReserveSystem.CallOpts, assetCode)
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) GetExchange(opts *bind.CallOpts, assetCode string) (string, [32]byte, *big.Int, error) {
	var (
		ret0 = new(string)
		ret1 = new([32]byte)
		ret2 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _DigitalReserveSystem.contract.Call(opts, out, "getExchange", assetCode)
	return *ret0, *ret1, *ret2, err
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemSession) GetExchange(assetCode string) (string, [32]byte, *big.Int, error) {
	return _DigitalReserveSystem.Contract.GetExchange(&_DigitalReserveSystem.CallOpts, assetCode)
}

// GetExchange is a free data retrieval call binding the contract method 0xff4b2032.
//
// Solidity: function getExchange(string assetCode) constant returns(string, bytes32, uint256)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) GetExchange(assetCode string) (string, [32]byte, *big.Int, error) {
	return _DigitalReserveSystem.Contract.GetExchange(&_DigitalReserveSystem.CallOpts, assetCode)
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemCaller) Heart(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DigitalReserveSystem.contract.Call(opts, out, "heart")
	return *ret0, err
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Heart() (common.Address, error) {
	return _DigitalReserveSystem.Contract.Heart(&_DigitalReserveSystem.CallOpts)
}

// Heart is a free data retrieval call binding the contract method 0xf58d1c94.
//
// Solidity: function heart() constant returns(address)
func (_DigitalReserveSystem *DigitalReserveSystemCallerSession) Heart() (common.Address, error) {
	return _DigitalReserveSystem.Contract.Heart(&_DigitalReserveSystem.CallOpts)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) MintFromCollateralAmount(opts *bind.TransactOpts, netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "mintFromCollateralAmount", netCollateralAmount, assetCode)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) MintFromCollateralAmount(netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromCollateralAmount(&_DigitalReserveSystem.TransactOpts, netCollateralAmount, assetCode)
}

// MintFromCollateralAmount is a paid mutator transaction binding the contract method 0xf15821f7.
//
// Solidity: function mintFromCollateralAmount(uint256 netCollateralAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) MintFromCollateralAmount(netCollateralAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromCollateralAmount(&_DigitalReserveSystem.TransactOpts, netCollateralAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) MintFromStableCreditAmount(opts *bind.TransactOpts, mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "mintFromStableCreditAmount", mintAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) MintFromStableCreditAmount(mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromStableCreditAmount(&_DigitalReserveSystem.TransactOpts, mintAmount, assetCode)
}

// MintFromStableCreditAmount is a paid mutator transaction binding the contract method 0x99bbfd72.
//
// Solidity: function mintFromStableCreditAmount(uint256 mintAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) MintFromStableCreditAmount(mintAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.MintFromStableCreditAmount(&_DigitalReserveSystem.TransactOpts, mintAmount, assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Rebalance(opts *bind.TransactOpts, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "rebalance", assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Rebalance(assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Rebalance(&_DigitalReserveSystem.TransactOpts, assetCode)
}

// Rebalance is a paid mutator transaction binding the contract method 0x41212e9e.
//
// Solidity: function rebalance(string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Rebalance(assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Rebalance(&_DigitalReserveSystem.TransactOpts, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Redeem(opts *bind.TransactOpts, stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "redeem", stableCreditAmount, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Redeem(stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Redeem(&_DigitalReserveSystem.TransactOpts, stableCreditAmount, assetCode)
}

// Redeem is a paid mutator transaction binding the contract method 0x24b76fd5.
//
// Solidity: function redeem(uint256 stableCreditAmount, string assetCode) returns(bool)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Redeem(stableCreditAmount *big.Int, assetCode string) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Redeem(&_DigitalReserveSystem.TransactOpts, stableCreditAmount, assetCode)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemTransactor) Setup(opts *bind.TransactOpts, collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.contract.Transact(opts, "setup", collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemSession) Setup(collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Setup(&_DigitalReserveSystem.TransactOpts, collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// Setup is a paid mutator transaction binding the contract method 0xcbbaa9a0.
//
// Solidity: function setup(bytes32 collateralAssetCode, bytes32 peggedCurrency, string assetCode, uint256 peggedValue) returns(string, address)
func (_DigitalReserveSystem *DigitalReserveSystemTransactorSession) Setup(collateralAssetCode [32]byte, peggedCurrency [32]byte, assetCode string, peggedValue *big.Int) (*types.Transaction, error) {
	return _DigitalReserveSystem.Contract.Setup(&_DigitalReserveSystem.TransactOpts, collateralAssetCode, peggedCurrency, assetCode, peggedValue)
}

// DigitalReserveSystemMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemMintIterator struct {
	Event *DigitalReserveSystemMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemMint represents a Mint event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemMint struct {
	AssetCode           string
	MintAmount          *big.Int
	AssetAddress        common.Address
	CollateralAssetCode [32]byte
	CollateralAmount    *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterMint(opts *bind.FilterOpts, assetAddress []common.Address, collateralAssetCode [][32]byte) (*DigitalReserveSystemMintIterator, error) {

	var assetAddressRule []interface{}
	for _, assetAddressItem := range assetAddress {
		assetAddressRule = append(assetAddressRule, assetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Mint", assetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemMintIterator{contract: _DigitalReserveSystem.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemMint, assetAddress []common.Address, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var assetAddressRule []interface{}
	for _, assetAddressItem := range assetAddress {
		assetAddressRule = append(assetAddressRule, assetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Mint", assetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemMint)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xddd98b18c74c43aa2894d989d78dde03a92ddf9e04a53b5655fdfdb73ddd06dc.
//
// Solidity: event Mint(string assetCode, uint256 mintAmount, address indexed assetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseMint(log types.Log) (*DigitalReserveSystemMint, error) {
	event := new(DigitalReserveSystemMint)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemRebalanceIterator is returned from FilterRebalance and is used to iterate over the raw logs and unpacked data for Rebalance events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRebalanceIterator struct {
	Event *DigitalReserveSystemRebalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemRebalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemRebalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemRebalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemRebalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemRebalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemRebalance represents a Rebalance event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRebalance struct {
	AssetCode           string
	CollateralAssetCode [32]byte
	RequiredAmount      *big.Int
	PresentAmount       *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterRebalance is a free log retrieval operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterRebalance(opts *bind.FilterOpts, collateralAssetCode [][32]byte) (*DigitalReserveSystemRebalanceIterator, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Rebalance", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemRebalanceIterator{contract: _DigitalReserveSystem.contract, event: "Rebalance", logs: logs, sub: sub}, nil
}

// WatchRebalance is a free log subscription operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchRebalance(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemRebalance, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Rebalance", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemRebalance)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Rebalance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRebalance is a log parse operation binding the contract event 0x008e62cd96b0691398a041f2299585aff60e32ad8c758616f09bdebded312571.
//
// Solidity: event Rebalance(string assetCode, bytes32 indexed collateralAssetCode, uint256 requiredAmount, uint256 presentAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseRebalance(log types.Log) (*DigitalReserveSystemRebalance, error) {
	event := new(DigitalReserveSystemRebalance)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Rebalance", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemRedeemIterator is returned from FilterRedeem and is used to iterate over the raw logs and unpacked data for Redeem events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRedeemIterator struct {
	Event *DigitalReserveSystemRedeem // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemRedeemIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemRedeem)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemRedeem)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemRedeemIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemRedeemIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemRedeem represents a Redeem event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemRedeem struct {
	AssetCode              string
	StableCreditAmount     *big.Int
	CollateralAssetAddress common.Address
	CollateralAssetCode    [32]byte
	CollateralAmount       *big.Int
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterRedeem is a free log retrieval operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterRedeem(opts *bind.FilterOpts, collateralAssetAddress []common.Address, collateralAssetCode [][32]byte) (*DigitalReserveSystemRedeemIterator, error) {

	var collateralAssetAddressRule []interface{}
	for _, collateralAssetAddressItem := range collateralAssetAddress {
		collateralAssetAddressRule = append(collateralAssetAddressRule, collateralAssetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Redeem", collateralAssetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemRedeemIterator{contract: _DigitalReserveSystem.contract, event: "Redeem", logs: logs, sub: sub}, nil
}

// WatchRedeem is a free log subscription operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchRedeem(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemRedeem, collateralAssetAddress []common.Address, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetAddressRule []interface{}
	for _, collateralAssetAddressItem := range collateralAssetAddress {
		collateralAssetAddressRule = append(collateralAssetAddressRule, collateralAssetAddressItem)
	}
	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Redeem", collateralAssetAddressRule, collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemRedeem)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Redeem", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeem is a log parse operation binding the contract event 0xa10c2c65339d202e362f405266f364b6d67e3d643f28be672e5629015930e94e.
//
// Solidity: event Redeem(string assetCode, uint256 stableCreditAmount, address indexed collateralAssetAddress, bytes32 indexed collateralAssetCode, uint256 collateralAmount)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseRedeem(log types.Log) (*DigitalReserveSystemRedeem, error) {
	event := new(DigitalReserveSystemRedeem)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Redeem", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DigitalReserveSystemSetupIterator is returned from FilterSetup and is used to iterate over the raw logs and unpacked data for Setup events raised by the DigitalReserveSystem contract.
type DigitalReserveSystemSetupIterator struct {
	Event *DigitalReserveSystemSetup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DigitalReserveSystemSetupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DigitalReserveSystemSetup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DigitalReserveSystemSetup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DigitalReserveSystemSetupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DigitalReserveSystemSetupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DigitalReserveSystemSetup represents a Setup event raised by the DigitalReserveSystem contract.
type DigitalReserveSystemSetup struct {
	AssetCode           string
	PeggedCurrency      [32]byte
	PeggedValue         *big.Int
	CollateralAssetCode [32]byte
	AssetAddress        common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterSetup is a free log retrieval operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) FilterSetup(opts *bind.FilterOpts, collateralAssetCode [][32]byte) (*DigitalReserveSystemSetupIterator, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.FilterLogs(opts, "Setup", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return &DigitalReserveSystemSetupIterator{contract: _DigitalReserveSystem.contract, event: "Setup", logs: logs, sub: sub}, nil
}

// WatchSetup is a free log subscription operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) WatchSetup(opts *bind.WatchOpts, sink chan<- *DigitalReserveSystemSetup, collateralAssetCode [][32]byte) (event.Subscription, error) {

	var collateralAssetCodeRule []interface{}
	for _, collateralAssetCodeItem := range collateralAssetCode {
		collateralAssetCodeRule = append(collateralAssetCodeRule, collateralAssetCodeItem)
	}

	logs, sub, err := _DigitalReserveSystem.contract.WatchLogs(opts, "Setup", collateralAssetCodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DigitalReserveSystemSetup)
				if err := _DigitalReserveSystem.contract.UnpackLog(event, "Setup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetup is a log parse operation binding the contract event 0xcab34b46abfe0198ee940493abe1167b55efc2b24ff7c43c988360d197c962df.
//
// Solidity: event Setup(string assetCode, bytes32 peggedCurrency, uint256 peggedValue, bytes32 indexed collateralAssetCode, address assetAddress)
func (_DigitalReserveSystem *DigitalReserveSystemFilterer) ParseSetup(log types.Log) (*DigitalReserveSystemSetup, error) {
	event := new(DigitalReserveSystemSetup)
	if err := _DigitalReserveSystem.contract.UnpackLog(event, "Setup", log); err != nil {
		return nil, err
	}
	return event, nil
}
