// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/console/interface.go

// Package mockutils is a generated GoMock package.
package mockutils

import (
	gomock "github.com/golang/mock/gomock"
	promptui "github.com/manifoldco/promptui"
	reflect "reflect"
)

// MockPrompt is a mock of Prompt interface
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// RequestPassphrase mocks base method
func (m *MockPrompt) RequestPassphrase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPassphrase")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestPassphrase indicates an expected call of RequestPassphrase
func (mr *MockPromptMockRecorder) RequestPassphrase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPassphrase", reflect.TypeOf((*MockPrompt)(nil).RequestPassphrase))
}

// RequestString mocks base method
func (m *MockPrompt) RequestString(label string, validate promptui.ValidateFunc) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestString", label, validate)
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestString indicates an expected call of RequestString
func (mr *MockPromptMockRecorder) RequestString(label, validate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestString", reflect.TypeOf((*MockPrompt)(nil).RequestString), label, validate)
}

// RequestHiddenString mocks base method
func (m *MockPrompt) RequestHiddenString(label string, validate promptui.ValidateFunc) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHiddenString", label, validate)
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestHiddenString indicates an expected call of RequestHiddenString
func (mr *MockPromptMockRecorder) RequestHiddenString(label, validate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHiddenString", reflect.TypeOf((*MockPrompt)(nil).RequestHiddenString), label, validate)
}

// RequestConfirmation mocks base method
func (m *MockPrompt) RequestConfirmation(label string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestConfirmation", label)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RequestConfirmation indicates an expected call of RequestConfirmation
func (mr *MockPromptMockRecorder) RequestConfirmation(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestConfirmation", reflect.TypeOf((*MockPrompt)(nil).RequestConfirmation), label)
}

// RequestChoice mocks base method
func (m *MockPrompt) RequestChoice(label string, choices []string, currentChoice string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestChoice", label, choices, currentChoice)
	ret0, _ := ret[0].(int)
	return ret0
}

// RequestChoice indicates an expected call of RequestChoice
func (mr *MockPromptMockRecorder) RequestChoice(label, choices, currentChoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestChoice", reflect.TypeOf((*MockPrompt)(nil).RequestChoice), label, choices, currentChoice)
}
