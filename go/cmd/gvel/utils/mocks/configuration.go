// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/config/interface.go

// Package mockutils is a generated GoMock package.
package mockutils

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfiguration is a mock of Configuration interface
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// InitSharedConfig mocks base method
func (m *MockConfiguration) InitSharedConfig(baseDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSharedConfig", baseDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSharedConfig indicates an expected call of InitSharedConfig
func (mr *MockConfigurationMockRecorder) InitSharedConfig(baseDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSharedConfig", reflect.TypeOf((*MockConfiguration)(nil).InitSharedConfig), baseDir)
}

// InitEnvBasedConfig mocks base method
func (m *MockConfiguration) InitEnvBasedConfig(baseDir, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitEnvBasedConfig", baseDir, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitEnvBasedConfig indicates an expected call of InitEnvBasedConfig
func (mr *MockConfigurationMockRecorder) InitEnvBasedConfig(baseDir, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitEnvBasedConfig", reflect.TypeOf((*MockConfiguration)(nil).InitEnvBasedConfig), baseDir, envName)
}

// Exists mocks base method
func (m *MockConfiguration) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (mr *MockConfigurationMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockConfiguration)(nil).Exists))
}

// GetAccountDbPath mocks base method
func (m *MockConfiguration) GetAccountDbPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDbPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccountDbPath indicates an expected call of GetAccountDbPath
func (mr *MockConfigurationMockRecorder) GetAccountDbPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDbPath", reflect.TypeOf((*MockConfiguration)(nil).GetAccountDbPath))
}

// GetDefaultAccount mocks base method
func (m *MockConfiguration) GetDefaultAccount() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultAccount")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultAccount indicates an expected call of GetDefaultAccount
func (mr *MockConfigurationMockRecorder) GetDefaultAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultAccount", reflect.TypeOf((*MockConfiguration)(nil).GetDefaultAccount))
}

// SetDefaultAccount mocks base method
func (m *MockConfiguration) SetDefaultAccount(account string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultAccount indicates an expected call of SetDefaultAccount
func (mr *MockConfigurationMockRecorder) SetDefaultAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultAccount", reflect.TypeOf((*MockConfiguration)(nil).SetDefaultAccount), account)
}

// GetCurrentEnv mocks base method
func (m *MockConfiguration) GetCurrentEnv() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEnv")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentEnv indicates an expected call of GetCurrentEnv
func (mr *MockConfigurationMockRecorder) GetCurrentEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEnv", reflect.TypeOf((*MockConfiguration)(nil).GetCurrentEnv))
}

// SetCurrentEnv mocks base method
func (m *MockConfiguration) SetCurrentEnv(account string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEnv", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEnv indicates an expected call of SetCurrentEnv
func (mr *MockConfigurationMockRecorder) SetCurrentEnv(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEnv", reflect.TypeOf((*MockConfiguration)(nil).SetCurrentEnv), account)
}

// GetEnvList mocks base method
func (m *MockConfiguration) GetEnvList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetEnvList indicates an expected call of GetEnvList
func (mr *MockConfigurationMockRecorder) GetEnvList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvList", reflect.TypeOf((*MockConfiguration)(nil).GetEnvList))
}
